{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNYcfbiASEZBV7b4KlxGcKS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zXEYiERqwVHi","executionInfo":{"status":"ok","timestamp":1732984514368,"user_tz":-345,"elapsed":556,"user":{"displayName":"Prince Sapkota","userId":"09511598920454699363"}},"outputId":"98c0fe50-0639-4373-da0c-7dc47eb92ff7"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[4.80413085e-310 0.00000000e+000]\n"," [2.90435030e-144 6.94401592e-310]]\n","\n"," [[1. 1.]\n"," [1. 1.]\n"," [1. 1.]\n"," [1. 1.]]\n","\n"," [[7 7 7]\n"," [7 7 7]\n"," [7 7 7]]\n","\n"," [[0 0 0]\n"," [0 0 0]\n"," [0 0 0]]\n","\n"," [[1 1 1]\n"," [1 1 1]\n"," [1 1 1]]\n","\n"," [1 2 3 4]\n"]}],"source":["#1\n","import numpy as np\n","emp_arr= np.empty((2,2))\n","print(emp_arr)\n","#initialize an all one array with size 4x2\n","ones_arr = np.ones((4,2))\n","print(\"\\n\",ones_arr)\n","#3\n","fill_value = 7\n","shape = (3,3)\n","filled_arr = np.full(shape, fill_value)\n","print(\"\\n\",filled_arr)\n","#4\n","zeros_arr = np.zeros_like(filled_arr)\n","print(\"\\n\",zeros_arr)\n","#5\n","ones_arr = np.ones_like(filled_arr)\n","print(\"\\n\",ones_arr)\n","##6\n","new_list = [1,2,3,4]\n","numpy_arr = np.array(new_list)\n","print(\"\\n\",numpy_arr)"]},{"cell_type":"code","source":["#2\n","import numpy as np\n","#1\n","arr_range = np.arange(10,50)\n","print(\"\\n\",arr_range)\n","#2\n","matrix_3x3 = np.arange(0,9).reshape(3,3)\n","print(\"\\n\",matrix_3x3)\n","#3\n","identity_matrix = np.eye(3)\n","print(\"\\n\",identity_matrix)\n","#4\n","random_array = np.random.rand(30)\n","mean_value = random_array.mean()\n","print(\"\\n\",random_array)\n","print(\"\\n\",mean_value)\n","#5\n","random_matrix = np.random.random((10,10))\n","min_value = random_matrix.min()\n","max_value = random_matrix.max()\n","print(\"\\n\",random_matrix)\n","print(\"\\n\",max_value)\n","print(\"\\n\",min_value)\n","#6\n","arr_0=np.zeros(10)\n","arr_0[4]=1\n","print(\"\\n\",arr_0)\n","#7\n","arr = np.array([1,2,0,0,4,0])\n","rev_arr=arr[::-1]\n","print(\"\\n\",rev_arr)\n","#8\n","arr_2d = np.ones((5,5))\n","arr_2d[1:-1,1:-1]=0\n","print(\"\\n\",arr_2d)\n","#9\n","checkrbd = np.zeros((8,8), dtype=int)\n","checkrbd[1::2,::2]=1\n","checkrbd[::2,1::2]=1\n","print(\"\\n\",checkrbd)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"etklki_qxiQu","executionInfo":{"status":"ok","timestamp":1732984535025,"user_tz":-345,"elapsed":496,"user":{"displayName":"Prince Sapkota","userId":"09511598920454699363"}},"outputId":"4f69ee80-6022-4036-9bb9-8c130a140e57"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n"," 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n","\n"," [[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n","\n"," [[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","\n"," [0.5099161  0.74460808 0.60369623 0.51778753 0.0764715  0.06905465\n"," 0.76400438 0.74730093 0.92449135 0.62043244 0.0637135  0.09700482\n"," 0.28439079 0.7031503  0.57449826 0.4766754  0.69780686 0.13958369\n"," 0.07860899 0.7719808  0.76817879 0.24703051 0.41461152 0.71344741\n"," 0.12563605 0.08854144 0.58097197 0.24880561 0.88608944 0.35075016]\n","\n"," 0.4629746505393345\n","\n"," [[0.63124713 0.99204927 0.0679383  0.22841366 0.08890563 0.1747198\n","  0.36923108 0.92149948 0.98459297 0.07068021]\n"," [0.85923012 0.63810759 0.66521146 0.1654022  0.16962509 0.67431664\n","  0.78783119 0.63678444 0.93812652 0.8307356 ]\n"," [0.17252481 0.25769539 0.50656022 0.30659268 0.92816229 0.66999419\n","  0.93494007 0.07079623 0.12664228 0.93880998]\n"," [0.83154052 0.75298771 0.07606342 0.02715367 0.69030015 0.91480847\n","  0.82494077 0.87599641 0.64268249 0.89218258]\n"," [0.03934858 0.31625705 0.65521676 0.36915667 0.40245869 0.39570502\n","  0.93163762 0.25071533 0.45632208 0.67997041]\n"," [0.7888672  0.86679465 0.63554364 0.11870928 0.38443597 0.66175969\n","  0.27445026 0.07546734 0.37078176 0.50993214]\n"," [0.60935366 0.74066972 0.51001912 0.43452509 0.14487234 0.67810994\n","  0.75023903 0.73535295 0.36458413 0.17393017]\n"," [0.11357026 0.89141338 0.62630453 0.94524824 0.93644585 0.86269349\n","  0.77192142 0.05734682 0.06310886 0.79655912]\n"," [0.76379125 0.33592749 0.97832435 0.04116114 0.96299243 0.57305011\n","  0.14443361 0.59657118 0.21069242 0.62554347]\n"," [0.05853944 0.85230634 0.86337954 0.22850134 0.85981933 0.43937274\n","  0.10190236 0.2748883  0.71342839 0.72692184]]\n","\n"," 0.9920492665310902\n","\n"," 0.027153674590088883\n","\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n","\n"," [0 4 0 0 2 1]\n","\n"," [[1. 1. 1. 1. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 1. 1. 1. 1.]]\n","\n"," [[0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]]\n"]}]},{"cell_type":"code","source":["#problem3\n","import numpy as np\n","x=np.array(([1,2],[3,5]))\n","y=np.array(([5,6],[7,8]))\n","v=np.array(([9,10]))\n","w=np.array([11,12])\n","#add 2 arrays\n","add_arr= x+y\n","print(add_arr)\n","#sub the array\n","sub_arr = x-y\n","print(\"\\n\",sub_arr)\n","#mult\n","mul_x = x*3\n","print(\"\\n\",mul_x)\n","#square\n","square_x = np.square(x)\n","print(\"\\n\",square_x)\n","#dot product\n","dot_vw=np.dot(v,w)\n","print(\"\\n\",dot_vw)\n","dot_xv=np.dot(x,v)\n","print(\"\\n\",dot_xv)\n","dot_xy=np.dot(x,y)\n","print(\"/n\",dot_xy)\n","#concatenate\n","concat_xy_rows = np.concatenate((x,y), axis = 0)\n","concat_vw_column = np.vstack((v,w))\n","print(\"\\n\",concat_xy_rows)\n","print(\"\\n\",concat_vw_column)\n","# concat x and v, observe error\n","try:\n","  concat_xv = np.concatenate((x,y),axis=0)\n","  print(concat_xv)\n","except ValueError as e:\n","  print(\"\\nError when concatenating x and v:\")\n","  print(e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HM8dZnt10bVO","executionInfo":{"status":"ok","timestamp":1732984549091,"user_tz":-345,"elapsed":538,"user":{"displayName":"Prince Sapkota","userId":"09511598920454699363"}},"outputId":"e366fa28-07b0-4b59-9f7c-d67aed9d6ad7"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 6  8]\n"," [10 13]]\n","\n"," [[-4 -4]\n"," [-4 -3]]\n","\n"," [[ 3  6]\n"," [ 9 15]]\n","\n"," [[ 1  4]\n"," [ 9 25]]\n","\n"," 219\n","\n"," [29 77]\n","/n [[19 22]\n"," [50 58]]\n","\n"," [[1 2]\n"," [3 5]\n"," [5 6]\n"," [7 8]]\n","\n"," [[ 9 10]\n"," [11 12]]\n","[[1 2]\n"," [3 5]\n"," [5 6]\n"," [7 8]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import time\n","\n","#Element-wise Addition\n","list1 = [i for i in range(1000000)]\n","list2 = [i for i in range(1000000)]\n","arr1 = np.array(list1)\n","arr2 = np.array(list2)\n","\n","#Python Lists\n","start_time = time.time()\n","list_sum = [list1[i] + list2[i] for i in range(len(list1))]\n","end_time = time.time()\n","print(\"Time taken for element-wise addition using Python Lists: \", end_time - start_time, \"seconds\\n\")\n","\n","#NumPy Arrays\n","start_time = time.time()\n","array_sum = arr1 + arr2\n","end_time = time.time()\n","print(\"Time taken for element-wise addition using NumPy Arrays: \", end_time - start_time, \"seconds\\n\")\n","\n","#Element-wise Multiplication\n","#Python Lists\n","start_time = time.time()\n","list_prod = [list1[i] * list2[i] for i in range(len(list1))]\n","end_time = time.time()\n","print(\"Time taken for element-wise multiplication using Python Lists: \", end_time - start_time, \"seconds\\n\")\n","\n","#NumPy Arrays\n","start_time = time.time()\n","array_prod = arr1 * arr2\n","end_time = time.time()\n","print(\"Time taken for element-wise multiplication using NumPy Arrays: \", end_time - start_time, \"seconds\\n\")\n","\n","#Dot Product\n","#Python Lists\n","start_time = time.time()\n","dot_product_list = sum(list1[i] * list2[i] for i in range(len(list1)))\n","end_time = time.time()\n","print(\"Time taken for dot product using Python Lists: \", end_time - start_time, \"seconds\\n\")\n","\n","#NumPy Arrays\n","start_time = time.time()\n","dot_product_array = np.dot(arr1, arr2)\n","end_time = time.time()\n","print(\"Time taken for dot product using NumPy Arrays: \", end_time - start_time, \"seconds\\n\")\n","\n","#Matrix Multiplication\n","matrix1 = [[i for i in range(1000)] for j in range(1000)]\n","matrix2 = [[i for i in range(1000)] for j in range(1000)]\n","numpy_matrix1 = np.array(matrix1)\n","numpy_matrix2 = np.array(matrix2)\n","\n","#Python Lists\n","start_time = time.time()\n","matrix_result = [[sum(a * b for a, b in zip(matrix1_row, matrix2_col)) for matrix2_col in zip(*matrix2)] for matrix1_row in matrix1]\n","end_time = time.time()\n","print(\"Time taken for matrix multiplication using Python Lists: \", end_time - start_time, \"seconds\\n\")\n","\n","#NumPy Arrays\n","start_time = time.time()\n","numpy_matrix_result = np.dot(numpy_matrix1, numpy_matrix2)\n","end_time = time.time()\n","print(\"Time taken for matrix multiplication using NumPy Arrays: \", end_time - start_time, \"seconds\\n\")"],"metadata":{"id":"E8eUMcp87tY7"},"execution_count":null,"outputs":[]}]}